def gcd(a, h):
    temp = 0
    while(1):
        temp = a % h
        if (temp == 0):
            return h
        a = h
        h = temp

def gcdExtended(a, b):
    # Base Case
    if a == 0 :
        return b,0,1
             
    gcd,x1,y1 = gcdExtended(b%a, a)
     
    # Update x and y using results of recursive call
    x = y1 - (b//a) * x1
    y = x1
     
    return gcd,x,y


# p = 10333
# q = 11621
p = 32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389647960126939249806625440700685819469589938384356951833568218188663
q = 32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152334063994785580370721665417662212881203104945914551140008147396357886767669820042828793708588252247031092071155540224751031064253209884099238184688246467489498721336450133889385773

if p == q:
    print('equal')
else:
    print('unequal')

n = p*q

phi = (p-1)*(q-1)
e = 2
while (e < phi):
    if(gcd(e, phi) == 1):
        break
    else:
        e = e+1

# print(e)
# Private key (d stands for decrypt), choosing d such that it satisfies
# d*e = 1 mod(totient)

# k = 2
# d = (1 + (k*phi)) / e
_, _, d = gcdExtended(phi, e)
if d < 0: d += phi
# print(d)

# print((d * e) % phi)
 
# Encryption

msg = (input("Enter msg : "))

res = []
for ch in msg:
    c = ord(ch)
    c = pow(c, e, n)
    res.append(c)

# Encryption c = (msg ^ e) % n
print(res)

# Decryption m = (c ^ d) % n
print("decrypted: ")
for ec in res:
    m = pow(ec, d, n)
    print(chr(m), end="")

# print("Decrypted message = ", m)
